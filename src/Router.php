<?php

namespace Dongivan\RouteVersioning;

use Illuminate\Routing\Router as ParentRouter;
use Illuminate\Support\Str;
use Illuminate\Container\Container;
use Illuminate\Contracts\Events\Dispatcher;
use Dongivan\RouteVersioning\Exceptions\GroupVersionParameterException;

class Router extends ParentRouter
{
    /**
     * Create a new Router instance.
     *
     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
     * @param  \Illuminate\Container\Container|null  $container
     * @return void
     */
    public function __construct(Dispatcher $events, Container $container = null)
    {
        $this->events = $events;
        /* This line is changed to use RouteCollection in current package */
        $this->routes = new RouteCollection;
        $this->container = $container ?: new Container;
    }

    /**
     * Merge the given array with the last group stack.
     *
     * @param  array  $new
     * @param  bool  $prependExistingPrefix
     * @return array
     */
    public function mergeWithLastGroup($new, $prependExistingPrefix = true)
    {
        /* This line is changed to use RouteGroup in current package */
        return RouteGroup::merge($new, end($this->groupStack), $prependExistingPrefix);
    }

    /**
     * Create a new Route object.
     *
     * @param  array|string  $methods
     * @param  string  $uri
     * @param  mixed  $action
     * @return \Illuminate\Routing\Route
     */
    public function newRoute($methods, $uri, $action)
    {
        /* This line is changed to use Route in current package */
        return (new Route($methods, $uri, $action))
            ->setRouter($this)
            ->setContainer($this->container);
    }

    /**
     * Set the compiled route collection instance.
     *
     * @param  array  $routes
     * @return void
     */
    public function setCompiledRoutes(array $routes)
    {
        /*
            The route cache file is generated by Symfony compiled, and `$compiled[4]`
            is used to cache the `conditions` closure which is actually a string. So
            we use `eval` to get the closure here. Furthermore, we change compare
            function to avoid string compare bug.
        */
        ["compiled" => $compiled, "attributes" => $attributes] = $routes;

        $conditions = $compiled[4] ?? null;
        if (is_string($conditions) && Str::length($conditions) > 0) {
            $conditions = Str::replaceLast(",\n", "", $conditions);
            $conditions = preg_replace(
                /* The leading space char is important to avoid wrong matching */
                '/ \(\$request->headers->get\("(.*?)"\) >= \"(.*?)\"\)/',
                ' ' . Version::class . '::compareVersions(\$request->headers->get("$1"), "$2") >= 0',
                $conditions
            );

            $compiled[4] = eval("return $conditions;");
        }

        parent::setCompiledRoutes(compact("compiled", "attributes"));
    }


    /**
     * Dynamically handle calls into the router instance.
     *
     * @param  string  $method
     * @param  array  $parameters
     * @return mixed
     */
    public function __call($method, $parameters)
    {
        if (static::hasMacro($method)) {
            return $this->macroCall($method, $parameters);
        }

        if ($method === 'middleware') {
            /* This line is changed to use RouteRegistrar in current package */
            return (new RouteRegistrar($this))->attribute($method, is_array($parameters[0]) ? $parameters[0] : $parameters);
        }

        if ($method !== 'where' && Str::startsWith($method, 'where')) {
            /* This line is changed to use RouteRegistrar in current package */
            return (new RouteRegistrar($this))->{$method}(...$parameters);
        }

        /* Add `version` function */
        if ($method === "version") {
            if (!isset($parameters[0])) {
                throw new GroupVersionParameterException();
            }
            return (new RouteRegistrar($this))->attribute($method, Version::format($parameters[0]));
        }

        /* This line is changed to use RouteRegistrar in current package */
        return (new RouteRegistrar($this))->attribute($method, array_key_exists(0, $parameters) ? $parameters[0] : true);
    }
}
